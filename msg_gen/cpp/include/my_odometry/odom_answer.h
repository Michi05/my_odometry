/* Auto-generated by genmsg_cpp for file /home/r00t/Dropbox/ros_workspace/my_odometry/msg/odom_answer.msg */
#ifndef MY_ODOMETRY_MESSAGE_ODOM_ANSWER_H
#define MY_ODOMETRY_MESSAGE_ODOM_ANSWER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "tf2_msgs/TFMessage.h"
#include "tf2_msgs/TFMessage.h"
#include "nav_msgs/Odometry.h"
#include "nav_msgs/Odometry.h"

namespace my_odometry
{
template <class ContainerAllocator>
struct odom_answer_ {
  typedef odom_answer_<ContainerAllocator> Type;

  odom_answer_()
  : globalTF()
  , relativeTF()
  , globalOdometry()
  , relativeOdometry()
  , statusCode(0)
  {
  }

  odom_answer_(const ContainerAllocator& _alloc)
  : globalTF(_alloc)
  , relativeTF(_alloc)
  , globalOdometry(_alloc)
  , relativeOdometry(_alloc)
  , statusCode(0)
  {
  }

  typedef  ::tf2_msgs::TFMessage_<ContainerAllocator>  _globalTF_type;
   ::tf2_msgs::TFMessage_<ContainerAllocator>  globalTF;

  typedef  ::tf2_msgs::TFMessage_<ContainerAllocator>  _relativeTF_type;
   ::tf2_msgs::TFMessage_<ContainerAllocator>  relativeTF;

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _globalOdometry_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  globalOdometry;

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _relativeOdometry_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  relativeOdometry;

  typedef int64_t _statusCode_type;
  int64_t statusCode;


  typedef boost::shared_ptr< ::my_odometry::odom_answer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_odometry::odom_answer_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct odom_answer
typedef  ::my_odometry::odom_answer_<std::allocator<void> > odom_answer;

typedef boost::shared_ptr< ::my_odometry::odom_answer> odom_answerPtr;
typedef boost::shared_ptr< ::my_odometry::odom_answer const> odom_answerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::my_odometry::odom_answer_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::my_odometry::odom_answer_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace my_odometry

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_odometry::odom_answer_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_odometry::odom_answer_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_odometry::odom_answer_<ContainerAllocator> > {
  static const char* value() 
  {
    return "924973a8bd033ee323eab0377af1373a";
  }

  static const char* value(const  ::my_odometry::odom_answer_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x924973a8bd033ee3ULL;
  static const uint64_t static_value2 = 0x23eab0377af1373aULL;
};

template<class ContainerAllocator>
struct DataType< ::my_odometry::odom_answer_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_odometry/odom_answer";
  }

  static const char* value(const  ::my_odometry::odom_answer_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_odometry::odom_answer_<ContainerAllocator> > {
  static const char* value() 
  {
    return "## Common answer message for the odometry package\n\
##the services are suppossed to answer with this\n\
##info everytime.\n\
\n\
#   Global/Relative transform/odometry messages:\n\
# Transform frame from tf2 package\n\
tf2_msgs/TFMessage globalTF\n\
tf2_msgs/TFMessage relativeTF\n\
# System's odometry messages\n\
nav_msgs/Odometry globalOdometry\n\
nav_msgs/Odometry relativeOdometry\n\
\n\
# Code number for the status of the whole algorithm\n\
int64 statusCode\n\
\n\
\n\
================================================================================\n\
MSG: tf2_msgs/TFMessage\n\
geometry_msgs/TransformStamped[] transforms\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TransformStamped\n\
# This expresses a transform from coordinate frame header.frame_id\n\
# to the coordinate frame child_frame_id\n\
#\n\
# This message is mostly used by the \n\
# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. \n\
# See it's documentation for more information.\n\
\n\
Header header\n\
string child_frame_id # the frame id of the child frame\n\
Transform transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertianty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
";
  }

  static const char* value(const  ::my_odometry::odom_answer_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_odometry::odom_answer_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.globalTF);
    stream.next(m.relativeTF);
    stream.next(m.globalOdometry);
    stream.next(m.relativeOdometry);
    stream.next(m.statusCode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct odom_answer_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_odometry::odom_answer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::my_odometry::odom_answer_<ContainerAllocator> & v) 
  {
    s << indent << "globalTF: ";
s << std::endl;
    Printer< ::tf2_msgs::TFMessage_<ContainerAllocator> >::stream(s, indent + "  ", v.globalTF);
    s << indent << "relativeTF: ";
s << std::endl;
    Printer< ::tf2_msgs::TFMessage_<ContainerAllocator> >::stream(s, indent + "  ", v.relativeTF);
    s << indent << "globalOdometry: ";
s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.globalOdometry);
    s << indent << "relativeOdometry: ";
s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.relativeOdometry);
    s << indent << "statusCode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.statusCode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MY_ODOMETRY_MESSAGE_ODOM_ANSWER_H

